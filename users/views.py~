from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import SMEUserSerializer
from django.contrib.auth import login
from .serializers import LoginSerializer
from rest_framework.permissions import IsAuthenticated
from .models import VoiceTextEntry
from .serializers import VoiceTextEntrySerializer
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.decorators import authentication_classes, permission_classes, api_view
from .llm_utils import call_openrouter_and_parse


class RegisterView(APIView):
    def post(self, request):
        serializer = SMEUserSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "User registered successfully"}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# legacy view
# class LoginView(APIView):
#     def post(self, request):
#         serializer = LoginSerializer(data=request.data)
#         if serializer.is_valid():
#             user = serializer.validated_data['user']
#             login(request, user)  # create session
#             return Response({"message": "Login successful"}, status=status.HTTP_200_OK)
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# new login view
@api_view(['POST'])
def login_view(request):
    serializer = LoginSerializer(data=request.data)
    if serializer.is_valid():
        user = serializer.validated_data['user']
        refresh = RefreshToken.for_user(user)
        return Response({
            'refresh': str(refresh),
            'access': str(refresh.access_token),
        })
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class VoiceTextEntryView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = VoiceTextEntrySerializer(data=request.data)
        if serializer.is_valid():
            text = serializer.validated_data['text']
            user = request.user
            
            # Save the raw text
            VoiceTextEntry.objects.create(
                user=request.user,
                text=text
            )
            
            # Try extract a financial record
            records = call_openrouter_and_parse(request.user, text)
            
            if records:
                return Response({
                    "message": "Text saved and financial records extracted",
                    "records": [{
                        "product_name": records.product_name,
                        "quantity": records.quantity,
                        "price": records.price,
                        "total": records.total,
                        "transaction_type": records.transaction_type
                    } for r in records]
                }, status=status.HTTP_201_CREATED)
            return Response({"message": "Text saved successfully"}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
